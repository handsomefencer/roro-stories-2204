commands:
    artifact-copy:
        steps:
            - run:
                command: |
                    sudo docker cp $(sudo docker ps -aqf "name=${APP_NAME}"):/artifact ./${APP_NAME}
                name: Artifact copy from container to host
    artifact-generate:
        steps:
            - run: docker-compose build roro
            - run:
                command: |
                    sudo docker run \
                      --name ${APP_NAME} \
                      -v ${PWD}:/${APP_NAME} \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      -u 0 \
                      -it handsomefencer/roro \
                      sh -c "printf '${ANSWERS}\na\n' | roro rollon"
                name: Artifact generate in roro container
    artifact-up:
        steps:
            - run:
                command: "cd ${APP_NAME} \nsudo docker-compose build \nsudo docker-compose up -d\n"
                name: Artifact up using docker-compose
            - run:
                command: sleep 120
                name: Sleep for 2 minutes on fail
                when: on_fail
            - run:
                command: "cd ${APP_NAME} \nsudo docker-compose build \nsudo docker-compose up -d\n"
                name: Try again on fail
                when: on_fail
    log-into-dockerhub:
        steps:
            - run:
                command: docker-compose run -e CI_KEY=${CI_KEY} --rm roro roro generate:exposed
                name: Expose credentials in mise/env/ci.env.enc
            - run:
                command: echo $(cat mise/env/ci.env) >> $BASH_ENV
                name: Export credentials from mise/env/ci.env
            - run:
                command: |
                    echo ${DOCKERHUB_TOKEN} | docker login \
                      -u ${DOCKERHUB_USERNAME} \
                      --password-stdin
                name: Log into Docker Hub
            - run:
                command: "docker tag handsomefencer/roro handsomefencer/roro:latest \ndocker tag handsomefencer/roro handsomefencer/roro:${CIRCLE_SHA1} \n"
                name: Tag image with latest and circle (git) sha
            - run:
                command: |-
                    docker image push handsomefencer/roro:latest
                    docker image push handsomefencer/roro:${CIRCLE_SHA1}
                name: Push tagged images
    restore-and-save-cache:
        steps:
            - restore_cache:
                key: circlev2-{{ checksum "Gemfile.lock" }}
            - run: bundle config set --local path 'vendor/bundle'
            - run: bundle install --jobs=4 --retry=3
            - save_cache:
                key: circlev2-{{ checksum "Gemfile.lock" }}
                paths:
                    - vendor/bundle
    roro-image-build:
        steps:
            - run: |
                sudo chown -R $USER:$USER .
                sudo env UID=${UID} GID=${GID} docker-compose build roro
    set-variables:
        steps:
            - run:
                command: echo "APP_NAME=${CIRCLE_JOB//\\n/_}-${CIRCLE_WORKFLOW_JOB_ID}" >> "$BASH_ENV"
                name: Store answers and app_name variables
executors:
    docker-cimg-base:
        docker:
            - image: cimg/base:2023.06
    docker-cimg-ruby:
        docker:
            - image: cimg/ruby:<<parameters.version>>
        parameters:
            version:
                default: 3.2.2
                description: version tag
                type: string
    machine-osx:
        macos:
            xcode: 14.2.0
    machine-ubuntu:
        machine:
            docker_layer_caching: true
            image: ubuntu-2204:2023.04.2
    machine-ubuntu-no-caching:
        machine:
            docker_layer_caching: false
            image: ubuntu-2204:2023.04.2
    ruby-alpine:
        docker:
            - image: ruby:<<parameters.version>>-alpine
        parameters:
            version:
                default: 3.2.2
                description: version tag
                type: string
jobs:
    build:
        executor: machine-ubuntu
        steps:
            - checkout
            - restore-and-save-cache
    release:
        executor: docker-cimg-ruby
        steps:
            - checkout
            - run: |
                git config --global user.email "fred.schoeneman@gmail.com"
                git config --global user.name "Fred Schoeneman"
            - run: gem install gem-release
            - run: gem bump
            - run: gem release
    roro-image-build:
        executor: machine-ubuntu
        steps:
            - checkout
            - run: |
                sudo chown -R $USER:$USER .
                sudo env UID=${UID} GID=${GID} docker-compose build roro
    roro-image-push:
        executor: machine-ubuntu
        steps:
            - checkout
            - log-into-dockerhub
            - run: "docker tag handsomefencer/roro handsomefencer/roro:latest \ndocker tag handsomefencer/roro handsomefencer/roro:${CIRCLE_SHA1} \n"
            - run: |-
                docker image push handsomefencer/roro:latest
                docker image push handsomefencer/roro:${CIRCLE_SHA1}
    test:
        executor: machine-ubuntu
        parallelism: 5
        steps:
            - checkout
            - restore-and-save-cache
            - run: |-
                TEST=$(circleci tests glob "test/**/*/_test.rb" | circleci tests split)
                DEBUGGERER='true' bundle exec rake test $TEST
    test-adventures:
        environment:
            - ANSWERS: << parameters.answers >>
        executor: << parameters.os >>
        parameters:
            answers:
                default: "2"
                type: string
            os:
                default: docker-cimg-base
                type: executor
        steps:
            - checkout
            - set-variables
            - artifact-generate
            - artifact-copy
            - artifact-up
    test-rubies:
        executor: docker-cimg-ruby
        parameters:
            version:
                default: "3.0"
                description: version tag
                type: string
        steps:
            - checkout
            - run: docker-compose build test
            - run: docker-compose run --rm test sh -c "DEBUGGERER='true' rake test"
version: 2.1
workflows:
    adventures:
        jobs:
            - test-adventures:
                filters:
                    branches:
                        only:
                            - development
                matrix:
                    parameters:
                        answers:
                            - 1\n1\n1\n1
                            - 1\n1\n1\n2
                            - 1\n1\n2\n1\n1
                            - 1\n1\n2\n1\n2
                            - 1\n1\n2\n2\n1
                            - 1\n1\n2\n2\n2
                            - 1\n2\n1\n1
                            - 1\n2\n1\n2
                            - 1\n2\n2\n1\n1
                            - 1\n2\n2\n1\n2
                            - 1\n2\n2\n2\n1
                            - 1\n2\n2\n2\n2
                            - 1\n3\n1\n1
                            - 1\n3\n1\n2
                            - 1\n3\n2\n1\n1
                            - 1\n3\n2\n1\n2
                            - 1\n3\n2\n2\n1
                            - 1\n3\n2\n2\n2
                            - 1\n4\n1\n1
                            - 1\n4\n1\n2
                            - 1\n4\n2\n1\n1
                            - 1\n4\n2\n1\n2
                            - 1\n4\n2\n2\n1
                            - 1\n4\n2\n2\n2
                            - "2"
                        os:
                            - machine-ubuntu-no-caching
    gem-release:
        jobs:
            - release:
                filters:
                    branches:
                        only:
                            - gem-release
    release-image:
        jobs:
            - roro-image-push:
                filters:
                    branches:
                        only:
                            - release-image
    rollon-tests:
        jobs:
            - build
            - test:
                filters:
                    branches:
                        only:
                            - development
                requires:
                    - build
    rubies:
        jobs:
            - test-rubies:
                filters:
                    branches:
                        only: rubies
                matrix:
                    parameters:
                        version:
                            - "3.0"
                            - "2.7"
                            - "2.6"
                            - "2.5"

